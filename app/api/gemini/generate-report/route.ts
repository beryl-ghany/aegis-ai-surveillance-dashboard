import { NextRequest, NextResponse } from 'next/server';

interface Detection {
  id: string;
  confidence: number;
  severity: 'low' | 'medium' | 'high' | 'critical';
  time: string;
  camera: string;
  description?: string;
  lat: number;
  lng: number;
}

export async function POST(request: NextRequest) {
  try {
    const { detections, reportType, timeframe } = await request.json();
    const apiKey = process.env.GEMINI_API_KEY;

    if (!apiKey) {
      // Return mock report when API key is not available
      const mockReport = `# Security Intelligence Report

## Executive Summary
This report analyzes ${detections.length} security detections over the ${timeframe || 'last 24 hours'}. The overall security posture shows moderate risk with ${detections.filter(d => d.severity === 'critical').length} critical threats requiring immediate attention.

## Detailed Analysis
- **Total Detections**: ${detections.length}
- **Critical Threats**: ${detections.filter(d => d.severity === 'critical').length}
- **High Priority**: ${detections.filter(d => d.severity === 'high').length}
- **Medium Priority**: ${detections.filter(d => d.severity === 'medium').length}
- **Low Priority**: ${detections.filter(d => d.severity === 'low').length}

## Compliance Assessment
All detections have been properly logged with timestamps and camera locations. Chain of custody maintained throughout the surveillance period. GDPR compliance verified for data retention policies.

## Recommendations
1. Increase patrol frequency in high-activity areas
2. Review camera positioning for optimal coverage
3. Implement additional lighting in critical zones
4. Consider upgrading detection algorithms for better accuracy

## Appendices
### Incident Log
${detections.map(d => `- ${d.time}: ${d.description || 'Security detection'} (${d.severity.toUpperCase()}) - Camera: ${d.camera}`).join('\n')}

---
*Report generated by Aegis AI Security System*`;

      return NextResponse.json({
        success: true,
        report: mockReport,
        metadata: {
          reportType: reportType || 'Security Intelligence Report',
          timeframe: timeframe || 'Last 24 hours',
          incidentCount: detections.length,
          generatedAt: new Date().toISOString(),
          model: "mock-report-generator"
        }
      });
    }

    // Prepare data for Gemini
    const detectionData = detections.map((d: Detection) => ({
      id: d.id,
      confidence: d.confidence,
      severity: d.severity,
      time: d.time,
      camera: d.camera,
      description: d.description,
      location: `${d.lat.toFixed(4)}, ${d.lng.toFixed(4)}`
    }));

    const prompt = `You are a professional security analyst generating a ${reportType} report for the Aegis surveillance system.

DETECTION DATA (${detections.length} incidents):
${JSON.stringify(detectionData, null, 2)}

TIMEFRAME: ${timeframe}
REPORT TYPE: ${reportType}

Generate a comprehensive, professional report that includes:

1. **EXECUTIVE SUMMARY** (2-3 paragraphs)
   - Overall security status
   - Key findings and metrics
   - Critical recommendations

2. **DETAILED ANALYSIS**
   - Threat breakdown by severity
   - Confidence level analysis
   - Geographic distribution of incidents
   - Temporal patterns and trends

3. **COMPLIANCE ASSESSMENT**
   - Regulatory compliance status
   - Data protection considerations
   - Audit trail completeness

4. **RECOMMENDATIONS**
   - Immediate actions required
   - System improvements needed
   - Resource allocation suggestions
   - Training recommendations

5. **APPENDICES**
   - Detailed incident log
   - Camera performance metrics
   - Technical specifications

Format as professional markdown with clear headings, bullet points, and data tables where appropriate. Use security industry terminology and maintain a formal tone suitable for management and compliance officers.`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }],
          generationConfig: {
            temperature: 0.2,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 4096,
          }
        })
      }
    );

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.statusText}`);
    }

    const data = await response.json();
    const reportContent = data?.candidates?.[0]?.content?.parts?.[0]?.text || "Report generation failed";

    return NextResponse.json({
      success: true,
      report: reportContent,
      metadata: {
        reportType,
        timeframe,
        incidentCount: detections.length,
        generatedAt: new Date().toISOString(),
        model: "gemini-1.5-flash"
      }
    });

  } catch (error) {
    console.error('Gemini report generation error:', error);
    return NextResponse.json({ 
      error: "Failed to generate report with Gemini",
      details: error instanceof Error ? error.message : "Unknown error"
    }, { status: 500 });
  }
}
